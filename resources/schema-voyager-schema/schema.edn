;; A meta view of Schema Voyager. Shows Datomic properties and supplemental
;; Schema Voyager properties and their relationships.

;; import with
;; clojure -X:cli standalone :sources '[{:file/name "resources/schema-voyager-schema/schema.edn"}]'

[
 ;;;; As defined by Datomic

 ;; Limited to attributes that Schema Voyager 'understands' in some way. Other
 ;; attributes are displayed, but not given special treatment or meaning in the
 ;; UI.
 {:db/ident       :db/ident,
  :db/valueType   :db.type/keyword,
  :db/cardinality :db.cardinality/one,
  :db/unique      :db.unique/identity,
  :db/doc         "Attribute used to uniquely name an entity."}
 {:db/ident       :db/valueType,
  :db/valueType   :db.type/ref,
  :db/cardinality :db.cardinality/one,
  :db/doc         "Property of an attribute that specifies the attribute's value type. Built-in value types include, :db.type/keyword, :db.type/string, :db.type/ref, :db.type/instant, :db.type/long, :db.type/bigdec, :db.type/boolean, :db.type/float, :db.type/uuid, :db.type/double, :db.type/bigint,  :db.type/uri."}
 {:db/ident       :db/cardinality,
  :db/valueType   :db.type/ref,
  :db/cardinality :db.cardinality/one,
  :db/doc         "Property of an attribute. Two possible values: :db.cardinality/one for single-valued attributes, and :db.cardinality/many for many-valued attributes. Defaults to :db.cardinality/one."}
 {:db/ident       :db/unique,
  :db/valueType   :db.type/ref,
  :db/cardinality :db.cardinality/one,
  :db/doc         "Property of an attribute. If value is :db.unique/value, then attribute value is unique to each entity. Attempts to insert a duplicate value for a temporary entity id will fail. If value is :db.unique/identity, then attribute value is unique, and upsert is enabled. Attempting to insert a duplicate value for a temporary entity id will cause all attributes associated with that temporary id to be merged with the entity already in the database. Defaults to nil."}
 {:db/ident       :db/doc,
  :db/valueType   :db.type/string,
  :db/cardinality :db.cardinality/one,
  :db/fulltext    true,
  :db/doc         "Documentation string for an entity."}
 {:db/ident       :db/tupleType,
  :db/valueType   :db.type/keyword,
  :db/cardinality :db.cardinality/one}
 {:db/ident       :db/tupleTypes,
  :db/valueType   :db.type/tuple,
  :db/cardinality :db.cardinality/one,
  :db/tupleType   :db.type/keyword}
 {:db/ident       :db/tupleAttrs,
  :db/valueType   :db.type/tuple,
  :db/cardinality :db.cardinality/one,
  :db/tupleType   :db.type/keyword}

 {:db/ident       :db.entity/attrs,
  :db/valueType   :db.type/keyword,
  :db/cardinality :db.cardinality/many}
 {:db/ident       :db.entity/preds,
  :db/valueType   :db.type/symbol,
  :db/cardinality :db.cardinality/many}

 {:db/ident :db.cardinality/one,
  :db/doc   "One of two legal values for the :db/cardinality attribute. Specify :db.cardinality/one for single-valued attributes, and :db.cardinality/many for many-valued attributes."}
 {:db/ident :db.cardinality/many,
  :db/doc   "One of two legal values for the :db/cardinality attribute. Specify :db.cardinality/one for single-valued attributes, and :db.cardinality/many for many-valued attributes."}
 {:db/ident :db.unique/value,
  :db/doc   "Specifies that an attribute's value is unique. Attempts to create a new entity with a colliding value for a :db.unique/value will fail."}
 {:db/ident :db.unique/identity,
  :db/doc   "Specifies that an attribute's value is unique. Attempts to create a new entity with a colliding value for a :db.unique/value will become upserts."}
 {:db/ident :db.type/ref,
  :db/doc   "Value type for references. All references from one entity to another are through attributes with this value type."}
 {:db/ident :db.type/keyword,
  :db/doc   "Value type for keywords. Keywords are used as names, and are interned for efficiency. Keywords map to the native interned-name type in languages that support them."}
 {:db/ident :db.type/long,
  :db/doc   "Fixed integer value type. Same semantics as a Java long: 64 bits wide, two's complement binary representation."}
 {:db/ident :db.type/string,
  :db/doc   "Value type for strings."}
 {:db/ident :db.type/boolean,
  :db/doc   "Boolean value type."}
 {:db/ident :db.type/instant,
  :db/doc   "Value type for instants in time. Stored internally as a number of milliseconds since midnight, January 1, 1970 UTC. Representation type will vary depending on the language you are using."}
 {:db/ident :db.type/fn,
  :db/doc   "Value type for database functions. See Javadoc for Peer.function."}
 {:db/ident :db.type/uuid,
  :db/doc   "Value type for UUIDs. Maps to java.util.UUID on the JVM."}
 {:db/ident :db.type/double,
  :db/doc   "Floating point value type. Same semantics as a Java double: double-precision 64-bit IEEE 754 floating point."}
 {:db/ident :db.type/float,
  :db/doc   "Floating point value type. Same semantics as a Java float: single-precision 32-bit IEEE 754 floating point."}
 {:db/ident :db.type/uri,
  :db/doc   "Value type for URIs. Maps to java.net.URI on the JVM."}
 {:db/ident :db.type/bigint,
  :db/doc   "Value type for arbitrary precision integers. Maps to java.math.BigInteger on the JVM."}
 {:db/ident :db.type/bigdec,
  :db/doc   "Value type for arbitrary precision floating point numbers. Maps to java.math.BigDecimal on the JVM."}
 {:db/ident :db.type/tuple}
 {:db/ident :db.type/symbol}

 ;;;; As defined for Schema Voyager

 {:db/ident       :db.schema.collection/name
  :db/valueType   :db.type/keyword
  :db/cardinality :db.cardinality/one
  :db/doc         "The name of a collection. Can be any keyword, but usually matches the namespace of other idents in the schema."}
 {:db/ident       :db.schema.collection/type
  :db/valueType   :db.type/keyword
  :db/cardinality :db.cardinality/one
  :db/doc         "The type of a collection, either :aggregate or :enum."}
 {:db/ident       :db.schema/deprecated?
  :db/valueType   :db.type/boolean
  :db/cardinality :db.cardinality/one
  :db/doc         "Supplemental property of an attribute. Whether this attribute or constant has fallen out of use. Often used with :db.schema/see-also, to point to a new way of storing some data."}
 {:db/ident       :db.schema/see-also
  :db/valueType   :db.type/ref
  :db/cardinality :db.cardinality/many
  :db/doc         "Supplemental property of an attribute. Other attributes to which this attribute is related. Often used with :db.schema/deprecated? to point to a new way of storing some data."}
 {:db/ident       :db.schema/part-of
  :db/valueType   :db.type/ref
  :db/cardinality :db.cardinality/many
  :db/doc         "Supplemental property of an attribute. Which collection(s) this attribute or constant is a part of. Usually derived from the namespace of the ident and whether it has a :db/valueType. Can be overridden for an attribute that is used on many aggregates, or whose namespace differs from the entities on which it appears."}
 {:db/ident       :db.schema/references
  :db/valueType   :db.type/ref
  :db/cardinality :db.cardinality/many
  :db/doc         "Supplemental property of an attribute. Which collection(s) this attribute refers to."}
 {:db/ident       :db.schema/tuple-references
  :db/valueType   :db.type/ref
  :db/cardinality :db.cardinality/many
  :db/doc         "Supplemental property of an attribute. Which collection(s) various parts of this heterogeneous tuple refers to."}
 {:db/ident       :db.schema.tuple/position
  :db/valueType   :db.type/long
  :db/cardinality :db.cardinality/one
  :db/doc         "The position of a ref within a heterogeneous tuple. Zero-indexed."}

 ;;;; Fixes to Datomic

 ;; Redefinitions
 ;; Datomic defines these as keywords, but I consider them refs, so they can be assigned :db.schema/references
 {:db/ident :db/tupleType,    :db/valueType :db.type/ref}
 {:db/ident :db.entity/attrs, :db/valueType :db.type/ref}
 ;; Similarly, Datomic defines these as tuples of keywords, but I consider them tuples of refs.
 {:db/ident :db/tupleAttrs, :db/tupleType :db.type/ref}
 {:db/ident :db/tupleTypes, :db/tupleType :db.type/ref}

 ;; Missing docs
 {:db/ident :db/tupleAttrs,   :db/doc "Property of an attribute. Indicates that the attribute is a composite tuple, derived from other attributes of the same entity. References the other attributes that compose this attribute."}
 {:db/ident :db/tupleType,    :db/doc "Property of an attribute. Indicates that the attribute is a homogeneous tuple, a variable length composite. References the value type of the elements of the tuple."}
 {:db/ident :db/tupleTypes,   :db/doc "Property of an attribute. Indicates that the attribute is a heterogeneous tuple, a fixed length composite. References the value types of the elements of the tuple."}
 {:db/ident :db.entity/attrs, :db/doc "List of required attributes on entities transacted with this entity spec."}
 {:db/ident :db.entity/preds, :db/doc "List of validation functions that will be run on entities transacted with this entity spec."}

 ;;;; Supplemental

 ;; Relocations
 {:db/ident :db.schema/deprecated?,      :db.schema/part-of [#schema/agg :db]}
 {:db/ident :db.schema/see-also,         :db.schema/part-of [#schema/agg :db]}
 {:db/ident :db.schema/part-of,          :db.schema/part-of [#schema/agg :db]}
 {:db/ident :db.schema/references,       :db.schema/part-of [#schema/agg :db
                                                             #schema/agg :db.schema.tuple]}
 {:db/ident :db.schema/tuple-references, :db.schema/part-of [#schema/agg :db]}

 ;; References
 {:db/ident :db/cardinality             :db.schema/references [#schema/enum :db.cardinality]}
 {:db/ident :db/tupleAttrs              :db.schema/references [#schema/agg :db]}
 {:db/ident :db/tupleType               :db.schema/references [#schema/enum :db.type]}
 {:db/ident :db/tupleTypes              :db.schema/references [#schema/enum :db.type]}
 {:db/ident :db/unique                  :db.schema/references [#schema/enum :db.unique]}
 {:db/ident :db/valueType               :db.schema/references [#schema/enum :db.type]}
 {:db/ident :db.entity/attrs            :db.schema/references [#schema/agg :db]}
 {:db/ident :db.schema/part-of          :db.schema/references [#schema/agg :db.schema.collection]}
 {:db/ident :db.schema/references       :db.schema/references [#schema/agg :db.schema.collection]}
 {:db/ident :db.schema/see-also         :db.schema/references [#schema/agg :db]}
 {:db/ident :db.schema/tuple-references :db.schema/references [#schema/agg :db.schema.tuple]}

 ]
